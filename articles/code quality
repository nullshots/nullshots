/**
 * Payment Indicator means if you are paying online or with Point of Sale and 1 is by online and 0 by Point of Sale.
 * Additionally, by default it should 0 Point of Sale.
 * @returns paymentIndicator
 */
private int getPaymentIndicator(Boolean value){
  if(value == null){
     return 0;
  }else if(value.booleanValue()){
    return 1;
  } else {
     return 0;
  }
}

Refactoring : 1
- Add final to parameter
- Method can be static
- last else is not required.

private static int getPaymentIndicator(final Boolean value){
  if(value == null){
     return 0;
  }else if(value.booleanValue()){
    return 1;
  }
  return 0;
}

Refactoring : 2
Possible values of Boolean can be Boolean.True , Boolean.FALSE, NULL
In this particular case, we can further simplify the method by understing the mapping of possible values.

- NULL and BOOLEAN.FALSE are mapped to 0
- BOOLEAN.TRUE is mapped to 1

private static int getPaymentIndicator(final Boolean value){
  return Boolean.TRUE.equals(value) ? 1 : 0;
}

And, Bang we have reduced the 9 line of code to just one 3 lines.

We can do something like this as well return Boolean.FALSE.equals(value) ? 0 : 1; FALSE, NULL, NOT EQUAL these are negative english words that what I think I use postive words makes me feel good and bring good vibs.
